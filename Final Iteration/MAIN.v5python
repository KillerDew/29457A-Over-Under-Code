{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nIntake_motor_a = Motor(Ports.PORT14, GearSetting.RATIO_18_1, True)\nIntake_motor_b = Motor(Ports.PORT15, GearSetting.RATIO_18_1, False)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\ncontroller_1 = Controller(PRIMARY)\nWing = DigitalOut(brain.three_wire_port.a)\nCatapult = Motor(Ports.PORT7, GearSetting.RATIO_36_1, False)\nleft_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT6)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 299.24, 320, 40, MM, 1.6666666666666667)\nR_extra = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nL_extra = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nfrom math import degrees, atan2, sin, cos, radians, pi\n# Begin project code\n\n# -- SPEEDS --\nautonDriveSpeed = 20\nautonTurnSpeed = 20\nDriveSpeed = 30\nTurnSpeed = 20\n# --\n# -- Other Variables --\nDefualtStopping = HOLD\n\n#Â -- Utils --\ndef BuzzController(pattern):\n    controller_1.rumble(pattern)\ndef DisplaySingle(a):\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(a)\ndef MatchEndingReminder():\n    wait(85, SECONDS)\n    BuzzController(\"- -\")\n    wait(5, SECONDS)\n    BuzzController(\".\")\n    wait(5, SECONDS)\n    BuzzController(\".\")\n    wait(5, SECONDS)\n    BuzzController(\"...\")\ndef HeadingFromVector(a):\n    x = a[0]\n    y = a[1]\n    if x > 0 and y >= 0:\n        return 90 - degrees(atan2(y, x))\n    elif x <= 0 and y >= 0:\n        return 360 - degrees(atan2(y, x))\n    else:\n        return 90 + degrees(atan2(y, x))\n\ndef MagnitudeFromVector(a):\n    return ((a[0] ** 2) + (a[1] ** 2)) ** 0.5\n\ndef SetAutonSpeeds():\n    drivetrain.set_drive_velocity(autonDriveSpeed, PERCENT)\n    drivetrain.set_turn_velocity(autonTurnSpeed, PERCENT)\ndef SetStopping(stopping):\n    drivetrain.set_stopping(stopping)\n    L_extra.set_stopping(stopping)\n    R_extra.set_stopping(stopping)\ndef SetDriveVelocity(vel):\n    drivetrain.set_drive_velocity(vel, PERCENT)\n    L_extra.set_velocity(vel, PERCENT)\n    R_extra.set_velocity(vel, PERCENT)\ndef SetTurnVelocity(vel):\n    drivetrain.set_turn_velocity(vel, PERCENT)\n\n# -- Intake Functionality --\ndef IntakeForward():\n    Intake.spin(FORWARD)\n\ndef IntakeReverse():\n    Intake.spin(REVERSE)\n\ndef IntakeStop():\n    Intake.stop()\n# --\n# -- Catapult Functionality\ndef StartCatapult():\n    Catapult.spin(REVERSE)\n    SetStopping(HOLD)\n\ndef StopCatapult():\n    Catapult.stop()\n    SetStopping(DefualtStopping)\n# --\n# -- Wing Functionality --\nWingActive = False\ndef ToggleWing(override=None):\n    global WingActive\n    if override != None:\n        WingActive = override\n    else:\n        WingActive = not WingActive\n    Wing.set(WingActive)\n# --\n\n\n# -- Autonomous Paths and Timings --\n# Path In Format: [x (mm), y (mm), Forward/Reverse, speed (percent), Wing]\nDefensivePath = [  \n    [0, 1000, True, 100, True],\n    [0, 0, False, 100, False]\n]\nOffensivePath = [\n    [0, 1000, True, 50, True],\n    [0, 0, False, 30, False]\n]\nOffensive = False\nRw = 150\nRPMTORADS = 0.1047\ndt = 0.01\nRUN = True\nRad = 3.25/2\nState = [0, 0, 0]\ndef OdomLoop():\n    global State\n    while True:\n        wait(dt, SECONDS)\n        dl = left_drive_smart.velocity(RPM) * RPMTORADS * dt * Rad\n        dr = right_drive_smart.velocity(RPM) * RPMTORADS * dt * Rad\n        d = (dl + dr)/2\n        dx = d*cos(radians(State[2]))\n        dy = d*sin(radians(State[2]))\n        State[0] = State[0] + dx\n        State[1] = State[1] + dy\n        State[2] = drivetrain_inertial.heading(DEGREES)\n        DisplaySingle(State)\ndef autonomous():\n    calibrate_drivetrain()\n    PathChosen = OffensivePath if Offensive else DefensivePath\n    First = True\n    drivetrain_inertial.set_heading(State[2], DEGREES)\n    PrevWaypoint = []\n    Commands = []\n    for i in range(len(PathChosen)):\n        Waypoint = PathChosen[i]\n        if First:\n            First = False\n            MovementVector = [Waypoint[0]-State[0], Waypoint[1]-State[1]]\n        else:\n            MovementVector = [Waypoint[0]-PrevWaypoint[0], Waypoint[1]-PrevWaypoint[1]]\n        Heading2Vector = HeadingFromVector(MovementVector)\n        brain.screen.print(Heading2Vector)\n        if Waypoint[2] != True:\n            Heading2Vector = (Heading2Vector + 180) % 360\n        Mag = MagnitudeFromVector(MovementVector)\n        Commands.append([Heading2Vector, Mag, Waypoint[3], Waypoint[4]])\n        PrevWaypoint = Waypoint\n    brain.screen.print(Commands)\n    for Command in Commands:\n        if Command == Commands[len(Commands)-1]:\n            pass\n        drivetrain.set_drive_velocity(Command[2])\n        drivetrain.turn_to_heading(Command[0], DEGREES, wait=True)\n        ToggleWing(override = Command[3])\n        drivetrain.drive_for(FORWARD, Command[1], MM, wait=True)\n\ndef driver_control():\n    Thread(MatchEndingReminder)\n    drivetrain.set_stopping(COAST)\n\ndef RecordInputs(MaxElapsed):\n    dt = 0.02\n    elapsed = 0\n    times = []\n    MotorVelocities = []\n    SetAutonSpeeds()\n    while elapsed < MaxElapsed:\n        times.append(elapsed)\n        Lspeed = left_drive_smart.velocity(RPM)\n        Rspeed = right_drive_smart.velocity(RPM)\n        MotorVelocities.append([Lspeed, Rspeed])\n        elapsed += dt\n        wait(dt, SECONDS)\n    with open(\"Auton/dt.txt\", 'wb') as dt_txt:\n        dt_txt.f.write(str(dt))\n    with open(\"Auton/Speeds.csv\", 'wb') as f:\n        for x in MotorVelocities:\n            f.writeline(str(x[0]) + \",\" + str(x[1]))\ndef PreAuton():\n\n    competition = Competition(driver_control, autonomous)\n    # -- Controller Event Listeners\n    controller_1.buttonL2.pressed(IntakeForward)\n    controller_1.buttonR2.pressed(IntakeReverse)\n    controller_1.buttonL2.released(IntakeStop)\n    controller_1.buttonR2.released(IntakeStop)\n    controller_1.buttonX.pressed(StartCatapult)\n    controller_1.buttonX.released(StopCatapult)\n    # --\n\n    # -- Set Speeds \n    Intake.set_velocity(100, PERCENT)\n    Catapult.set_velocity(30, PERCENT)\n    Catapult.set_stopping(HOLD)\n    # --\n    Intake.set_stopping(HOLD)\n    calibrate_drivetrain()\n    Thread(OdomLoop)\n    drivetrain.set_stopping(COAST)\n    L_extra.set_stopping(COAST)\n    R_extra.set_stopping(COAST)\n    SetDriveVelocity(100)\n\nPreAuton()","textLanguage":"python","rconfig":[{"port":[14,15],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"Wing","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7],"name":"Catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[19,20,9,10,6],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio18_1","gearRatio":"60:36","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[8],"name":"R_extra","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"L_extra","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}