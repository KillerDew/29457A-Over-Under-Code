{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 299.24, 295, 40, MM, 1.6666666666666667)\nIntake_motor_a = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)\nIntake_motor_b = Motor(Ports.PORT15, GearSetting.RATIO_18_1, True)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\nL_extra = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nR_extra = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\nWing = DigitalOut(brain.three_wire_port.a)\nCatapult = Motor(Ports.PORT14, GearSetting.RATIO_36_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n# -- SPEEDS --\nautonDriveSpeed = 20\nautonTurnSpeed = 20\nDriveSpeed = 30\nTurnSpeed = 20\n# --\n# -- Other Variables --\nDefualtStopping = HOLD\n\n#Â -- Utils --\ndef BuzzController(pattern):\n    controller_1.rumble(pattern)\ndef MatchEndingReminder():\n    wait(85, SECONDS)\n    BuzzController(\"- -\")\n    wait(5, SECONDS)\n    BuzzController(\".\")\n    wait(5, SECONDS)\n    BuzzController(\".\")\n    wait(5, SECONDS)\n    BuzzController(\"...\")\n\ndef SetAutonSpeeds():\n    drivetrain.set_drive_velocity(autonDriveSpeed, PERCENT)\n    drivetrain.set_turn_velocity(autonTurnSpeed, PERCENT)\ndef SetStopping(stopping):\n    drivetrain.set_stopping(stopping)\n    L_extra.set_stopping(stopping)\n    R_extra.set_stopping(stopping)\n\n# -- Intake Functionality --\ndef IntakeForward():\n    Intake.spin(FORWARD)\n\ndef IntakeReverse():\n    Intake.spin(REVERSE)\n\ndef IntakeStop():\n    Intake.stop()\n# --\n# -- Catapult Functionality\ndef StartCatapult():\n    Catapult.spin(REVERSE)\n    SetStopping(HOLD)\n\ndef StopCatapult():\n    Catapult.stop()\n    SetStopping(DefualtStopping)\n# --\n# -- Wing Functionality --\nWingActive = False\ndef ToggleWing(override=None):\n    global WingActive\n    if override != None:\n        WingActive = override\n    else:\n        WingActive = not WingActive\n    Wing.set(WingActive)\n# --\n\ndef Drive():\n    L_extra.spin(FORWARD)\n    R_extra.spin(FORWARD)\n    while True:\n        wait(1, MSEC)\n        L_extra.set_velocity(left_drive_smart.velocity(RPM), RPM)\n        R_extra.set_velocity(right_drive_smart.velocity(RPM), RPM)\n\ndef autonomous():\n    pass\ndef driver_control():\n    Thread(MatchEndingReminder)\n    SetVelocity(DriveSpeed)\n    drivetrain.set_stopping(BRAKE)\n\ndef RecordInputs(MaxElapsed):\n    dt = 0.02\n    elapsed = 0\n    times = []\n    MotorVelocities = []\n    SetAutonSpeeds()\n    Thread(Drive)\n    while elapsed < MaxElapsed:\n        times.append(elapsed)\n        Lspeed = left_drive_smart.velocity(RPM)\n        Rspeed = right_drive_smart.velocity(RPM)\n        MotorVelocities.append([Lspeed, Rspeed])\n        elapsed += dt\n        wait(dt, SECONDS)\n    with open(\"Auton/dt.txt\", 'wb') as dt_txt:\n        dt_txt.f.write(str(dt))\n    with open(\"Auton/Speeds.csv\", 'wb') as f:\n        for x in MotorVelocities:\n            f.writeline(str(x[0]) + \",\" + str(x[1]))\ndef PreAuton():\n\n    competition = Competition(driver_control, autonomous)\n    # -- Controller Event Listeners\n    controller_1.buttonL2.pressed(IntakeForward)\n    controller_1.buttonR2.pressed(IntakeReverse)\n    controller_1.buttonL2.released(IntakeStop)\n    controller_1.buttonR2.released(IntakeStop)\n    controller_1.buttonX.pressed(StartCatapult)\n    controller_1.buttonX.released(StopCatapult)\n    # --\n\n    # -- Set Speeds \n    Intake.set_velocity(50, PERCENT)\n    Catapult.set_velocity(50, PERCENT)\n    # --\n\nPreAuton()","textLanguage":"python","rconfig":[{"port":[1,2,9,10,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio18_1","gearRatio":"60:36","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[16,15],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"L_extra","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"R_extra","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"Wing","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[14],"name":"Catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}